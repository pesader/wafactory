#!/bin/bash

FIREFOX_CONFIG_DIR=$HOME/.mozilla/firefox
INSTALLED_FILENAME=installed.txt

__check_similar_name_installed(){
    if [ $(find $HOME/.mozilla/firefox -name "*$1"  | wc -l) -gt 0 ];
    then
        echo "A similarly named webapp was already created!"
        exit 1
    fi
}

__install_privacy_addons(){
    mkdir $PROFILE_DIR/extensions
    # UBlock Origin
    wget "https://addons.mozilla.org/firefox/downloads/file/3853583/ublock_origin-1.38.6-an+fx.xpi" -O "$1/extensions/uBlock0@raymondhill.net.xpi"
    # Decentraleyes
    wget "https://addons.mozilla.org/firefox/downloads/file/3833987/decentraleyes-2.0.16-an+fx.xpi" -O "$1/extensions/jid1-BoFifL9Vbdl2zQ@jetpack.xpi"
    # Clear URLs
    # wget "https://addons.mozilla.org/firefox/downloads/file/3748919/clearurls-1.21.0-an+fx.xpi" -O "$1/extensions/{$(uuidgen)}.xpi"
}

findicon(){
    query=$1
    while getopts ":i" opt; do
        case $opt in
            i)
                query="$OPTARG"
                ;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                ;;
        esac
    done

    if [ $(find /usr/share/icons -name "*$query*"  | wc -l) -gt 0 ];
    then
        find /usr/share/icons -name "*$query*" | while read line; do
            echo $line | awk -F / '{print $5 ": " $8}' | rev | cut -c 5- | rev
        done
    else
        echo "No icons found!"
    fi
}

install(){
    link=$1
    name=$2
    icon="applications-webapps"
    privacy=false
    while getopts ":l:n:i:p" opt; do
        case $opt in
            l)
                link="$OPTARG"
                ;;
            n)
                name="$OPTARG"
                ;;
            i)
                icon="$OPTARG"
                ;;
            p)
                privacy=true
                ;;
            :)
                echo "Option -$OPTARG requires an argument." >&2
                exit 1
                ;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                exit 1
                ;;
        esac
    done
    __check_similar_name_installed $name

    # create a new Firefox profile with a unique name
    PROFILE_NAME="$(uuidgen)-$name"
    firefox -CreateProfile $PROFILE_NAME

    # write profile name to a file, to facilitate uninstallation
    if [ -f ./$INSTALLED_FILENAME]; then
        echo $PROFILE_NAME >> ./$INSTALLED_FILENAME
    else
        touch ./installed.txt
        echo $PROFILE_NAME >> ./$INSTALLED_FILENAME
    fi

    # get absolute path to newly created profile
    PROFILE_DIR=$(find $FIREFOX_CONFIG_DIR -name "*$PROFILE_NAME")

    # copy user.js file to profile directory
    cp "./user.js" "$PROFILE_DIR"

    # copy userChrome.css to profile directory
    mkdir $PROFILE_DIR/chrome
    cp ./userChrome.css $PROFILE_DIR/chrome/

    # install privacy addons if asked to do that
    if [ "$privacy" = true ]; then
        __install_privacy_addons $PROFILE_DIR
    fi

# write a desktop entry
    CONTENT=$(cat <<EOF
[Desktop Entry]\n
Version=1.0\n
Type=Application\n
Name=$name\n
Icon=$icon\n
NoDisplay=false\n
Exec=firefox --no-remote -P "$PROFILE_NAME" --name=$name --class=$name $link\n
Categories=Utility;\n
StartupWMClass=$name\n
EOF
)

    echo -e $CONTENT > $HOME/.local/share/applications/$PROFILE_NAME-webapp.desktop

}

remove(){
    name=$1
    while getopts ":n:" opt; do
        case $opt in
            n)
                name="$OPTARG"
                ;;
            :)
                echo "Option -$OPTARG requires an argument." >&2
                exit 1
                ;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                exit 1
                ;;
        esac
    done

    if grep -q $name $INSTALLED_FILENAME; then
        app_id="$(grep $name $INSTALLED_FILENAME)"
        # remove desktop entry
        rm "$HOME/.local/share/applications/$app_id-webapp.desktop"
        # remove firefox profile
        profile_dir=$(find $FIREFOX_CONFIG_DIR -name "*$app_id")
        rm -rf profile_dir
        # remove app id from installed.txt
        sed -i "/$app_id/d" $INSTALLED_FILENAME
    else
        echo "$name not installed!"
    fi
}

uninstall(){
    name=$1
    while getopts ":n:" opt; do
        case $opt in
            n)
                name="$OPTARG"
                ;;
            :)
                echo "Option -$OPTARG requires an argument." >&2
                exit 1
                ;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                exit 1
                ;;
        esac
    done
    remove $name
}

if [[ $1 =~ ^(install|uninstall|remove|findicon)$ ]]; then
    "$@"
else
    echo "Invalid subcommand $1" >&2
    exit 1
fi
